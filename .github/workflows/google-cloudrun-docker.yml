# This workflow builds and deploys a Go application to Google Cloud Run.
#
# To use this workflow, you must set up the following secrets in your GitHub repository:
#
# - WIF_PROVIDER: The full identifier of the Workload Identity Provider.
#   (e.g., projects/123456789/locations/global/workloadIdentityPools/github/providers/my-repo)
#
# - WIF_SERVICE_ACCOUNT: The email address of the service account to use.
#   (e.g., sbcwaste@sbcwaste.iam.gserviceaccount.com)
#
# Note: The `scripts/deploy-githubactions.sh` script can be used to set up the
#       necessary Google Cloud resources and will output the values for
#       WIF_PROVIDER and WIF_SERVICE_ACCOUNT.

name: Build and Deploy to Google Cloud Run

on:
  workflow_dispatch:
    inputs:
      CACHE_EXPIRY_SECONDS:
        description: 'Cache expiry in seconds'
        required: true
        default: '259200'
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: sbcwaste
  GAR_LOCATION: europe-west1
  REPO: eu-docker-repo
  IMAGE: sbcwaste
  REGION: europe-west1

jobs:
  build:
    name: Build, Scan, and Push
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.build-image.outputs.image_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run tests
        run: go test ./...

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: './src/...'

      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.IMAGE }}:${{ github.sha }} .
          echo "image_name=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.IMAGE }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_name }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Authenticate to Google Cloud
        if: github.event_name == 'push'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        if: github.event_name == 'push'
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        if: github.event_name == 'push'
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev -q

      - name: Push Docker image
        if: github.event_name == 'push'
        run: docker push ${{ steps.build-image.outputs.image_name }}

  deploy:
    name: Deploy to Cloud Run
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Set up deployment environment
        id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "APP_ENV=prod" >> $GITHUB_ENV
            echo "SERVICE=sbcwaste-prod" >> $GITHUB_ENV
            echo "DOMAIN=sbcwaste.top" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            echo "APP_ENV=dev" >> $GITHUB_ENV
            echo "SERVICE=sbcwaste-dev" >> $GITHUB_ENV
            echo "DOMAIN=dev.sbcwaste.top" >> $GITHUB_ENV
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ needs.build.outputs.image_name }}
          env_vars: |
            APP_ENV=${{ env.APP_ENV }}
            PROJECT_ID=${{ env.PROJECT_ID }}
            CACHE_EXPIRY_SECONDS=${{ github.event.inputs.CACHE_EXPIRY_SECONDS || '259200' }}

      - name: Verify DNS
        run: |
          echo "Verifying DNS for ${{ env.DOMAIN }}..."
          for i in {1..10}; do
            cname=$(dig +short ${{ env.DOMAIN }} CNAME)
            if [ "$cname" == "ghs.googlehosted.com." ]; then
              echo "DNS verification successful."
              exit 0
            fi
            echo "Attempt $i: DNS not yet propagated. Waiting 30 seconds..."
            sleep 30
          done
          echo "DNS verification failed after several attempts."
          exit 1

      - name: Verify Application Health
        run: |
          echo "Verifying application health for https://${{ env.DOMAIN }}"
          # First, check the /health endpoint
          for i in {1..10}; do
            response_code=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.DOMAIN }}/health")
            if [ "$response_code" == "200" ]; then
              body=$(curl -s "https://${{ env.DOMAIN }}/health")
              if echo "$body" | grep -q '{"status": "ok"}'; then
                echo "Health check successful on /health endpoint."
                break
              else
                echo "Attempt $i: /health endpoint is up, but response is not as expected. Waiting 30 seconds..."
              fi
            else
              echo "Attempt $i: /health endpoint not yet responding with 200 OK (Got $response_code). Waiting 30 seconds..."
            fi
            sleep 30
          done

          if [ $i -eq 10 ]; then
            echo "Health check on /health endpoint failed after several attempts."
            exit 1
          fi

          # Second, check the root path to ensure the app is serving static assets
          for i in {1..10}; do
            response_code=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.DOMAIN }}/")
            if [ "$response_code" == "200" ]; then
              echo "Health check successful on root path."
              exit 0
            else
              echo "Attempt $i: Root path not yet responding with 200 OK (Got $response_code). Waiting 30 seconds..."
            fi
            sleep 30
          done

          echo "Health check on root path failed after several attempts."
          exit 1

  cleanup-images:
    name: Clean up old container images
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Clean up old images
        run: |
          echo "Identifying images to clean up in ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}"

          # Get the image digests for the currently deployed services.
          # The service might not exist, so we default to an empty string.
          prod_image=$(gcloud run services describe sbcwaste-prod --platform managed --region ${{ env.REGION }} --format 'value(template.containers.image)' 2>/dev/null) || prod_image=""
          dev_image=$(gcloud run services describe sbcwaste-dev --platform managed --region ${{ env.REGION }} --format 'value(template.containers.image)' 2>/dev/null) || dev_image=""

          echo "Currently deployed images:"
          echo "Prod: ${prod_image:-'not found'}"
          echo "Dev: ${dev_image:-'not found'}"

          # Get all image versions, sorted from newest to oldest
          all_images=$(gcloud artifacts docker images list ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }} --sort-by=~CREATE_TIME --format="get(version)")

          # The output from the command above is the full image path including the digest.
          # We need to filter this list to only include images for the current service.
          all_images=$(echo "$all_images" | grep "/${{ env.IMAGE }}@")

          # Build a unique list of images to keep
          images_to_keep_list=()
          [ -n "$prod_image" ] && images_to_keep_list+=("$prod_image")
          [ -n "$dev_image" ] && images_to_keep_list+=("$dev_image")

          # Add the 5 most recent images to the keep list
          images_to_keep_list+=($(echo "$all_images" | head -n 5))

          # Create a unique, sorted list of images to keep
          unique_keep_list=$(printf "%s\n" "${images_to_keep_list[@]}" | sort -u)

          echo "The following images will be kept:"
          echo "$unique_keep_list"

          # Use `grep` to find images that are in all_images but not in unique_keep_list.
          delete_list=$(echo "$all_images" | grep -vFx -f <(echo "$unique_keep_list"))

          # Delete the images if the delete list is not empty
          if [ -n "$delete_list" ]; then
            echo "The following images will be deleted:"
            echo "$delete_list"
            echo "$delete_list" | xargs -r gcloud artifacts docker images delete --delete-tags -q
          else
            echo "No images to delete."
          fi